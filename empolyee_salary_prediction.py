# -*- coding: utf-8 -*-
"""Empolyee_Salary_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a42t4n0h_P8rp6VVtS3ZImdpULRMK9a5

### **LOADING DATASET**
"""

import pandas as pd     # import pandas library for loadin and processing data
data=pd.read_csv(r"adult 3_.csv")     # Read adult 3_.csv file

data.head(10)     # head(n) used to get initial n rows

data.tail(3)   # tail(m) is used to get m rowa from end

data.shape # .shape is used to get number of rows and columns

#null values
data.isna().sum() #mean mdeian mode arbitrary

print(data.age.value_counts())

print(data.workclass.value_counts()) # The .value_counts() method  is used to get a count of the unique values in a column

data.workclass.replace({'?':'Others'},inplace=True) # .replace() is used to replace certain values in a column
data=data[data['workclass']!='Without-pay'] # removing unqiue values of a column which are not contribute in prediction made by model
data=data[data['workclass']!='Never-worked']
print(data['workclass'].value_counts())

print(data['occupation'].value_counts())

data.occupation.replace({'?':'Others'},inplace=True)
data=data[data['occupation']!='Armed-Forces']
print(data['occupation'].value_counts())

print(data.educational_num.value_counts())

print(data.relationship.value_counts())

print(data.education.value_counts())

print(data.marital_status.value_counts())

data=data[data['marital_status']!='Married-AF-spouse']
print(data['marital_status'].value_counts())

print(data['hours_per_week'].value_counts())

print(data['native_country'].value_counts())

data.native_country.replace({'?':'Others'},inplace=True)
print(data['native_country'].value_counts())

data.shape

"""## **OUTLIER DETECTION**"""

import matplotlib.pyplot as plt # matplotlib is used for data visualisation
plt.boxplot(data['age']) # .boxplot() provides a quick way to understand the central tendency, spread, and potential outliers of the data through a box and whiskers plot.
plt.show() #.show() displays the plots that have been created.

data=data[(data['age']<=75)&(data['age']>=17)] # To remove outliers
plt.boxplot(data['age'])
plt.show()

plt.boxplot(data['hours_per_week'])
plt.show()

plt.boxplot(data['educational_num'])
plt.show()

data=data[(data['educational_num']<=16)&(data['educational_num']>=6)] # To remove outliers
plt.boxplot(data['educational_num'])
plt.show()

data.shape

data

"""# **LABEL ENCODING**"""

from sklearn.preprocessing import LabelEncoder   #import library
import joblib
encoder=LabelEncoder()                       #create object
data['workclass']=encoder.fit_transform(data['workclass']) #7 categories   0,1, 2, 3, 4, 5, 6,
data['marital_status']=encoder.fit_transform(data['marital_status'])   #3 categories 0, 1, 2
data['occupation']=encoder.fit_transform(data['occupation'])
data['relationship']=encoder.fit_transform(data['relationship'])      #5 categories  0, 1, 2, 3, 4
data['education'] = encoder.fit_transform(data['education'])
data['native_country']=encoder.fit_transform(data['native_country'])

data
# List of categorical columns to encode
categorical_cols = ['workclass', 'education', 'marital_status', 'occupation', 'relationship', 'native_country']

# Dictionary to store encoders
encoders = {}

# Apply Label Encoding
for col in categorical_cols:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col])
    encoders[col] = le
joblib.dump(encoders, "encoders.pkl")
x=data.drop(columns=['income'])
y=data['income']
x

y

"""## **IMPORTING AND COMPARING MACHINE LEARNING ALGORITHMS**"""

from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler, OneHotEncoder
import joblib

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

models = {
    "DecisionTree": DecisionTreeClassifier(),
    "LogisticRegression": LogisticRegression(),
    "RandomForest": RandomForestClassifier(),
    "KNN": KNeighborsClassifier(),
    "SVM": SVC(),
    "GradientBoosting": GradientBoostingClassifier()
}

results = {}

for name, model in models.items():
    pipe = Pipeline([
        ('scaler', StandardScaler()),
        ('model', model)
    ])

    pipe.fit(X_train, y_train)
    y_pred = pipe.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    results[name] = acc
    print(f"{name} Accuracy: {acc:.4f}")
    print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
plt.bar(results.keys(), results.values(), color='lime')
plt.ylabel('Accuracy Score')
plt.title('Model Comparison', color ='blue')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Train and evaluate
for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    acc = accuracy_score(y_test, preds)
    results[name] = acc
    print(f"{name}: {acc:.4f}")

# Get best model
best_model_name = max(results, key=results.get)
best_model = models[best_model_name]
print(f"\n‚úÖ Best model: {best_model_name} with accuracy {results[best_model_name]:.4f}")

# Save the best model
joblib.dump(best_model, "best_model.pkl")
print("‚úÖ Saved best model as best_model.pkl")


# %%writefile app.py
import streamlit as st
import pandas as pd
import joblib

 # Load the trained model
model = joblib.load("best_model.pkl")
encoders = joblib.load("encoders.pkl")

 
#st.set_page_config(page_title="EMPLOYEE SALARY PREDICTION", page_icon="üíº", layout="centered")
 
st.title("üíº Employee Salary Classification App üíº")
st.markdown("Predict whether an employee earns >50K or ‚â§50K based on input features.")
 
# Sidebar inputs (these must match your training feature columns)
st.sidebar.header("üë®‚Äçüíª EMPLOYEE DETAILS")
 
# ‚ú® Replace these fields with your dataset's actual input columns
age = st.sidebar.slider("Age", 18, 65, 30)
workclass = st.selectbox("Workclass", encoders['workclass'].classes_.tolist())
education = st.selectbox("Education", encoders['education'].classes_.tolist())
educational_num = st.sidebar.slider("Years of Experience", 1, 16, 10)
marital_status = st.selectbox("Marital Status", encoders['marital_status'].classes_.tolist())
occupation = st.selectbox("Occupation", encoders['occupation'].classes_.tolist())
relationship = st.selectbox("Relationship", encoders['relationship'].classes_.tolist())
hours_per_week = st.sidebar.slider("Hours per week", 1, 80, 40)
native_country = st.selectbox("Native Country", encoders['native_country'].classes_.tolist())
 
# Build input DataFrame (‚ö†Ô∏è must match preprocessing of your training data)
input_df = pd.DataFrame ({
    'age': [age],
    'workclass' : [workclass],
    'education' : [education] ,
    'educational_num' : [educational_num] ,
    'marital_status' : [marital_status] ,
    'occupation' : [occupation] ,
    'relationship' : [relationship] ,
    'hours_per_week' : [hours_per_week] ,
    'native_country' : [native_country]
})
# Apply label encoding using saved encoders
for col in encoders:
    input_df[col] = encoders[col].transform(input_df[col])
 
st.write("### üîé Input Data")
st.write(input_df)
 
# Predict button
if st.button("Predict Salary Class"):
    prediction = model.predict(input_df)
    st.success(f"‚úÖ Prediction: {prediction[0]}")

# Batch prediction
st.markdown("---")
st.markdown("#### üìÇ Batch Prediction")
uploaded_file = st.file_uploader("Upload a CSV file for batch prediction", type="csv")

if uploaded_file is not None:
    batch_data = pd.read_csv(uploaded_file)
    st.write("Uploaded data preview:", batch_data.head())
    batch_preds = model.predict(batch_data)
    batch_data['PredictedClass'] = batch_preds
    st.write("‚úÖ Predictions:")
    st.write(batch_data.head())
    csv = batch_data.to_csv(index=False).encode('utf-8')
    st.download_button("Download Predictions CSV", csv, file_name='predicted_classes.csv', mime='text/csv')
